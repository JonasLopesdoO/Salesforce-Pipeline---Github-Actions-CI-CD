# Unique name for this workflow
name: Validate PRs

# Definition when the workflow should run
on:
    # The workflow will run whenever an event happens on a pull request
    pull_request:
      # The events are that a PR is opened, or when a commit is pushed
      # to a branch that has an existing pull request
      types: [opened, synchronize]
      # The branches filter allows to specify that this workflow should only
      # run if the branch name is "dev". This way we prevent this workflow
      # from running when PRs are opened on other branches
      branches: [ dev, uat, main ]
      # We only care about changes to the force-app directory, which is the
      # root directory of the sfdx project. This prevents the job from running
      # when changing non-salesforce files (like this yml file).
      paths:
        - 'force-app/**'
            

# Jobs to be executed when the above conditions are met
jobs:
    # This is the name of the job. You can give it whatever name you want
    validate-deployment-on-org:
        # As mentioned in the blog post, this job runs inside a VM. Here we
        # can specify which OS this VM should run on. 
        # In this case, we are going to run our commands on the latest version
        # of ubuntu
        runs-on: ubuntu-latest
        
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            # Now we install nodejs in the VM, and specify version 14
            - uses: actions/setup-node@v3
              with:
                node-version: '14'

            # The idea is that the VM can access your remote repository
            # because your repository is an sfdx project.
            # This is a default action that allows us to enter the root 
            # directory of the repository

            # Make sure to specify fetch-depth:0. This allows us to
            # access previous commits that have been pushed to the repository.

            # We'll need this later when we try to figure out which metadata has 
            # changed between commits, so that we can only deploy that metadata
            # to the destination org

            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0
                 
            - name: 'Enable file permissions for shell files'
              run: |
                chmod +x scripts/pullRequest.sh
                chmod +x scripts/additionalInstallations.sh
                chmod +x scripts/deploy.sh
                chmod +x scripts/getTestClassesName.sh
                chmod +x scripts/pullRequest.sh
                chmod +x scripts/pushDeploy.sh
                chmod +x scripts/validateDeploy.sh

            # Now Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

              # We use SFDX Git Delta to create a directory with only the metadata that has changed.
              # this allows us to deploy only those changes, as opposed to deploying the entire branch. 
              # This helps reducing deployment times
            - name: 'Installing sfdx git delta'
              run: |
                echo y | sfdx plugins:install sfdx-git-delta

            # Install java as it is required for the next step
            - name: 'Installing java'
              run: |
                sudo apt-get update
                sudo apt install default-jdk
            
            # This will be unzipped instead of downloaded which is faster, then executed during the scripting part
            - name: 'Installing pmd'
              run: |
                unzip pmd/pmd-bin-6.42.0.zip -d pmd

            - name: 'Run the scripts'
              env:
                PMD_MINIMUM_PRIORITY: ${{ secrets.PMD_MINIMUM_PRIORITY }}
                SFDC_DEV_CONSUMER_KEY: ${{ secrets.SFDC_DEV_CONSUMER_KEY }}
                SFDC_DEV_USERNAME: ${{ secrets.SFDC_DEV_USERNAME }}
                SFDC_DEV_INSTANCE_URL: ${{ secrets.SFDC_DEV_INSTANCE_URL }}
                SFDC_UAT_CONSUMER_KEY: ${{ secrets.SFDC_UAT_CONSUMER_KEY }}
                SFDC_UAT_USERNAME: ${{ secrets.SFDC_UAT_USERNAME }}
                SFDC_UAT_INSTANCE_URL: ${{ secrets.SFDC_UAT_INSTANCE_URL }}
                SFDC_PROD_CONSUMER_KEY: ${{ secrets.SFDC_PROD_CONSUMER_KEY }}
                SFDC_PROD_USERNAME: ${{ secrets.SFDC_PROD_USERNAME }}
                SFDC_PROD_INSTANCE_URL: ${{ secrets.SFDC_PROD_INSTANCE_URL }}
              run: |
                ./scripts/pullRequest.sh
